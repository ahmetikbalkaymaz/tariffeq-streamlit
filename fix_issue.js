const https = require('https');
const fs = require('fs');

const apiKey = process.env.GEMINI_API_KEY;
const issueTitle = process.env.ISSUE_TITLE;
const issueBody = process.env.ISSUE_BODY;

const payload = JSON.stringify({
  contents: [{
    parts: [{
      text: `Sen sigorta matematik uzmanƒ± ve Python/Streamlit developer'sƒ±n. Bu sigorta hesaplama uygulamasƒ±nƒ± geli≈ütiriyorsun.

      Issue: "${issueTitle}"
      A√ßƒ±klama: "${issueBody}"
      
      Sƒ∞GORTA HESAPLAMA UZMANI OLARAK G√ñREV:
      1. Sigorta matematik form√ºllerini doƒüru uygula
      2. Akt√ºerya hesaplamalarƒ±nƒ± implement et
      3. Professional Streamlit UI olu≈ütur
      4. Risk analizi ve premium calculations
      
      STREAMLIT SPECIFIC:
      - st.sidebar, st.columns ile professional layout
      - st.cache_data ile performance optimization
      - Interactive charts sigorta verisi i√ßin
      - Forms ve validation sigorta parametreleri i√ßin
      - Export functionality raporlar i√ßin
      
      Sƒ∞GORTA DOMAIN:
      - Life/Health/Property insurance calculations
      - Premium, reserve, solvency hesaplamalarƒ±
      - Risk modeling ve analysis
      - Regulatory compliance hesaplarƒ±
      
      TAM √á√ñZ√úMƒ∞ IMPLEMENTATION ET!
      Bu k√º√ß√ºk patch deƒüil, complete sigorta mod√ºl√º olsun!`
    }]
  }]
});

const options = {
  hostname: 'generativelanguage.googleapis.com',
  path: `/v1beta/models/gemini-2.5-pro:generateContent?key=${apiKey}`,
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': payload.length
  },
  timeout: 30000
};

console.log('üåê Doƒürudan API √ßaƒürƒ±sƒ± yapƒ±lƒ±yor...');

const req = https.request(options, (res) => {
  let data = '';
  res.on('data', (chunk) => data += chunk);
  res.on('end', () => {
    try {
      const response = JSON.parse(data);
      if (response.candidates && response.candidates[0]) {
        const aiResponse = response.candidates[0].parts[0].text;
        console.log('üè¶ Sigorta AI Analizi:', aiResponse.substring(0, 500) + '...');
        
        // Basit README g√ºncellemesi - AI'ƒ±n kendi kod yazmasƒ±nƒ± bekle
        const readmeUpdate = `
## üè¶ AI Sigorta Geli≈ütirmesi

### Issue #${process.env.ISSUE_NUMBER}: ${issueTitle}

**Tarih:** ${new Date().toLocaleString('tr-TR')}
**Durum:** AI-Powered Insurance Development

#### üìã Issue Detaylarƒ±:
${issueBody}

#### ü§ñ AI Analizi:
${aiResponse.substring(0, 1000)}

---
*Bu analiz Gemini 2.5 Pro tarafƒ±ndan sigorta expertise ile yapƒ±lmƒ±≈ütƒ±r.*

`;
        
        if (fs.existsSync('README.md')) {
          fs.appendFileSync('README.md', readmeUpdate);
        } else {
          fs.writeFileSync('README.md', `# Sigorta Hesaplama Uygulamasƒ±\n\n${readmeUpdate}`);
        }
        
        console.log('‚úÖ README.md g√ºncellendi - AI Analysis logged');
        process.exit(0);
      } else {
        console.log('‚ùå API yanƒ±tƒ± bo≈ü');
        process.exit(1);
      }
    } catch (e) {
      console.log('‚ùå JSON parse hatasƒ±:', e.message);
      process.exit(1);
    }
  });
});

req.on('error', (e) => {
  console.log('‚ùå API hatasƒ±:', e.message);
  process.exit(1);
});

req.on('timeout', () => {
  console.log('‚ùå API timeout');
  req.destroy();
  process.exit(1);
});

req.write(payload);
req.end();
