name: Gemini AI Auto Code Fixer (Error Tolerant)

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Timeout artırıldı
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Git
        run: |
          git config --global user.name "Gemini AI Bot"
          git config --global user.email "gemini-ai@github-actions.local"
          
      - name: Create working branch
        run: |
          # Önce main branch'a geçelim
          git checkout main
          git pull origin main
          
          # Sonra yeni branch oluşturalım
          BRANCH_NAME="gemini-fix-${{ github.event.issue.number }}-$(date +%s)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"
          
          echo "✅ Branch oluşturuldu: $BRANCH_NAME"
          echo "📍 Current branch: $(git branch --show-current)"
          
      - name: Show initial status
        run: |
          echo "🚀 İşlem başlatılıyor..."
          echo "📁 Repository yapısı:"
          find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.css" -o -name "*.html" -o -name "*.md" -o -name "*.json" \) -not -path "./.git/*" | head -15
          echo "📊 Toplam kod dosyası: $(find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.css" -o -name "*.html" \) -not -path "./.git/*" | wc -l)"
          
      - name: Comment on issue - Starting
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 Gemini AI İşlem Başlatıldı
              
              ⏰ **Başlangıç:** ${new Date().toLocaleString('tr-TR')}
              🔍 **Durum:** Issue analiz ediliyor...
              ⚠️ **Not:** API yoğunluğu nedeniyle işlem biraz uzayabilir (10-15dk)
              
              📊 **Workflow Log:** [Detaylı takip için tıklayın](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              💡 Lütfen sabırla bekleyin, sistem otomatik olarak yeniden deneyecek...`
            });

      - name: Try Gemini CLI with Retry Strategy (Attempt 1)
        id: gemini_attempt1
        timeout-minutes: 8
        continue-on-error: true
        uses: google-github-actions/run-gemini-cli@main
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          gemini_debug: true
          gemini_model: "gemini-2.5-pro"  # En güçlü model
          prompt: |
            Sen Gemini 2.5 Pro'sun ve sigorta matematik uzmanı + Python/Streamlit developer'sın. Bu sigorta hesaplama uygulamasını geliştiriyorsun.
            
            🎯 **STREAMLIT PROJE ANALİZİ:**
            1. Streamlit app dosyalarını bul: `find . -name "*.py" | head -20`
            2. Ana app dosyasını tespit et (app.py, streamlit_app.py, main.py)
            3. Sigorta hesaplama modüllerini kontrol et
            4. Requirements.txt ve config dosyalarını incele
            
            📋 **ISSUE DETAYLI ANALİZİ:**
            Issue: "${{ github.event.issue.title }}"
            Açıklama: "${{ github.event.issue.body }}"
            
            🏦 **SİGORTA HESAPLAMA UZMANI OLARAK:**
            
            **Matematik ve Aktüerya:**
            - Sigorta primleri hesaplaması (life, health, property)
            - Risk analizi ve underwriting algoritmalarını
            - Rezerv hesaplamaları ve cash flow projeksiyonları
            - Solvency ratio ve capital adequacy hesapları
            - Stochastic modeling ve Monte Carlo simulations
            - Premium calculation formulas (net, gross, loading factors)
            
            **Streamlit Specific Development:**
            - st.sidebar, st.columns, st.tabs ile professional UI
            - st.cache_data, st.cache_resource ile performance optimization  
            - st.session_state ile complex state management
            - Interactive charts (plotly, altair) sigorta verisi için
            - File upload/download sigorta raporları için
            - Forms ve input validation sigorta parametreleri için
            
            **Advanced Python Libraries:**
            - pandas, numpy: Veri manipulasyonu ve hesaplamalar
            - scipy.stats: İstatistiksel dağılımlar ve testler
            - matplotlib/plotly: Sigorta grafikleri ve visualization
            - datetime: Policy periods ve vade hesaplamaları
            - openpyxl: Excel export/import sigorta raporları için
            - streamlit-aggrid: Professional data tables
            
            **Sigorta Domain Expertise:**
            - Life insurance: mortality tables, actuarial calculations
            - Health insurance: morbidity rates, claim frequency
            - Property insurance: catastrophe modeling, exposure analysis
            - Reinsurance: quota share, surplus treaties
            - Investment returns ve asset-liability matching
            
            **Production-Ready Features:**
            - Input validation sigorta parametreleri için
            - Error handling edge cases için
            - Logging calculation steps ve audit trail
            - Performance optimization büyük datasets için
            - Professional reporting ve export functions
            - Multi-language support (TR/EN)
            
            **UI/UX for Insurance Apps:**
            - Clean, professional insurance industry UI
            - Step-by-step wizards complex calculations için
            - Real-time calculation updates
            - Interactive parameter sliders
            - Professional charts ve risk visualizations
            - Export capabilities (PDF, Excel reports)
            
            🎯 **GÖREV TİPLERİ:**
            
            **🔍 Bug ise (Hesaplama hataları):**
            - Matematik formüllerini kontrol et ve düzelt
            - Edge cases handle et (0, negative values, etc.)
            - Precision issues düzelt (decimal, rounding)
            - Unit tests ekle kritik calculations için
            
            **🚀 Feature ise (Yeni sigorta ürünü/hesaplama):**
            - Complete insurance product implement et
            - Professional UI components ekle
            - Calculation engine oluştur/genişlet
            - Validation rules ve business logic
            - Reporting ve export functionality
            
            **🔧 İyileştirme ise:**
            - Performance optimization büyük hesaplar için
            - Code refactoring maintainability için
            - Better error messages kullanıcılar için
            - Advanced visualizations
            
            🎯 **SINIRSIZ GELİŞTİRME YETKİN VAR!**
            - Complete insurance modules oluştur
            - Complex mathematical models implement et
            - Professional Streamlit interfaces yap
            - Multi-step calculation workflows
            - Advanced data processing ve analysis
            
            🔍 **SON KONTROL:**
            `git status` ve `git diff --stat` çalıştırıp tüm değişiklikleri göster.
            
            **Şimdi bu sigorta hesaplama issue'sunu tamamen çöz ve production-ready geliştirme yap!**

      - name: Check First Attempt Result
        id: check_attempt1
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ İlk deneme başarılı!"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ İlk deneme başarısız, ikinci denemeye geçiliyor..."
          fi
          
      - name: Wait and Retry (Attempt 2) - Different approach
        if: steps.check_attempt1.outputs.success == 'false'
        id: gemini_attempt2
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "🔄 İkinci deneme başlıyor (5 dakika bekleme sonrası)..."
          sleep 300  # 5 dakika bekle
          
          # Alternatif yaklaşım: Doğrudan Node.js ile API çağrısı
          cat > fix_issue.js << 'EOF'
          const https = require('https');
          const fs = require('fs');
          
          const apiKey = process.env.GEMINI_API_KEY;
          const issueTitle = process.env.ISSUE_TITLE;
          const issueBody = process.env.ISSUE_BODY;
          
          const payload = JSON.stringify({
            contents: [{
              parts: [{
                text: `Sen sigorta matematik uzmanı ve Python/Streamlit developer'sın. Bu sigorta hesaplama uygulamasını geliştiriyorsun.

                Issue: "${issueTitle}"
                Açıklama: "${issueBody}"
                
                SİGORTA HESAPLAMA UZMANI OLARAK GÖREV:
                1. Sigorta matematik formüllerini doğru uygula
                2. Aktüerya hesaplamalarını implement et
                3. Professional Streamlit UI oluştur
                4. Risk analizi ve premium calculations
                
                STREAMLIT SPECIFIC:
                - st.sidebar, st.columns ile professional layout
                - st.cache_data ile performance optimization
                - Interactive charts sigorta verisi için
                - Forms ve validation sigorta parametreleri için
                - Export functionality raporlar için
                
                SİGORTA DOMAIN:
                - Life/Health/Property insurance calculations
                - Premium, reserve, solvency hesaplamaları
                - Risk modeling ve analysis
                - Regulatory compliance hesapları
                
                TAM ÇÖZÜMİ IMPLEMENTATION ET!
                Bu küçük patch değil, complete sigorta modülü olsun!`
              }]
            }]
          });
          
          const options = {
            hostname: 'generativelanguage.googleapis.com',
            path: `/v1beta/models/gemini-2.5-pro:generateContent?key=${apiKey}`,
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Content-Length': payload.length
            },
            timeout: 30000
          };
          
          console.log('🌐 Doğrudan API çağrısı yapılıyor...');
          
          const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
              try {
                const response = JSON.parse(data);
                if (response.candidates && response.candidates[0]) {
                  const aiResponse = response.candidates[0].parts[0].text;
                  console.log('🏦 Sigorta AI Analizi:', aiResponse.substring(0, 500) + '...');
                  
                  // Basit README güncellemesi - AI'ın kendi kod yazmasını bekle
                  const readmeUpdate = `
          ## 🏦 AI Sigorta Geliştirmesi

          ### Issue #${process.env.ISSUE_NUMBER}: ${issueTitle}

          **Tarih:** ${new Date().toLocaleString('tr-TR')}
          **Durum:** AI-Powered Insurance Development

          #### 📋 Issue Detayları:
          ${issueBody}

          #### 🤖 AI Analizi:
          ${aiResponse.substring(0, 1000)}

          ---
          *Bu analiz Gemini 2.5 Pro tarafından sigorta expertise ile yapılmıştır.*

          `;
                  
                  if (fs.existsSync('README.md')) {
                    fs.appendFileSync('README.md', readmeUpdate);
                  } else {
                    fs.writeFileSync('README.md', `# Sigorta Hesaplama Uygulaması\n\n${readmeUpdate}`);
                  }
                  
                  console.log('✅ README.md güncellendi - AI Analysis logged');
                  process.exit(0);
                } else {
                  console.log('❌ API yanıtı boş');
                  process.exit(1);
                }
              } catch (e) {
                console.log('❌ JSON parse hatası:', e.message);
                process.exit(1);
              }
            });
          });
          
          req.on('error', (e) => {
            console.log('❌ API hatası:', e.message);
            process.exit(1);
          });
          
          req.on('timeout', () => {
            console.log('❌ API timeout');
            req.destroy();
            process.exit(1);
          });
          
          req.write(payload);
          req.end();
          EOF
          
          # Node.js scripti çalıştır
          ISSUE_TITLE="${{ github.event.issue.title }}" \
          ISSUE_BODY="${{ github.event.issue.body }}" \
          ISSUE_NUMBER="${{ github.event.issue.number }}" \
          GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
          node fix_issue.js

      - name: Check Second Attempt Result
        id: check_attempt2
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ İkinci deneme başarılı!"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ İkinci deneme de başarısız"
          fi

      - name: Fallback - Manual Fix (Attempt 3)
        if: steps.check_attempt1.outputs.success == 'false' && steps.check_attempt2.outputs.success == 'false'
        id: manual_fix
        run: |
          echo "🔧 Son çare: Manuel düzeltme yapılıyor..."
          
          # Basit bir fallback düzeltmesi
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Issue açıklamasına göre basit düzeltme
          cat > ISSUE_FIX.md << EOF
          # Issue Fix Report
          
          **Issue #${{ github.event.issue.number }}:** ${ISSUE_TITLE}
          
          ## Açıklama
          ${ISSUE_BODY}
          
          ## AI Durumu
          - Gemini API geçici olarak kullanılamadı (503 Service Unavailable)
          - Otomatik kod düzeltmesi yapılamadı
          - Bu rapor manuel olarak oluşturuldu
          
          ## Öneriler
          1. Issue'yu daha sonra tekrar deneyin
          2. Gemini API'ın yoğunluğu azaldığında otomatik düzeltme çalışacak
          3. Manuel kod incelemesi yapın
          
          **Oluşturulma:** $(date)
          **Durum:** API Overload (503)
          EOF
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Manuel rapor oluşturuldu"

      - name: Final Status Check
        id: final_check
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "✅ BAŞARILI: Değişiklikler yapıldı!"
            echo "📝 Değişen dosyalar:"
            git status --short
            echo ""
            echo "🔍 Detaylar:"
            git diff --stat
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "❌ BAŞARISIZ: Hiç değişiklik yapılamadı"
          fi

      - name: Commit changes if any
        if: steps.final_check.outputs.changes_made == 'true'
        run: |
          git add .
          git commit -m "🤖 fix: Issue #${{ github.event.issue.number }} - AI/Manual fix
          
          Issue: ${{ github.event.issue.title }}
          Status: $([ '${{ steps.check_attempt1.outputs.success }}' = 'true' ] && echo 'Gemini AI Success' || ([ '${{ steps.check_attempt2.outputs.success }}' = 'true' ] && echo 'Direct API Success' || echo 'Manual Fallback'))"
          
      - name: Push and Create PR
        if: steps.final_check.outputs.changes_made == 'true'
        run: |
          # Branch'ı push et
          echo "🚀 Branch push ediliyor: $BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          
          # Debug: Hangi branch'dayız kontrol et
          echo "📍 Current branch: $(git branch --show-current)"
          echo "🎯 Target branch: main"
          echo "🌿 PR Branch: $BRANCH_NAME"
          
      - name: Create Pull Request
        if: steps.final_check.outputs.changes_made == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "🤖 Fix: ${{ github.event.issue.title }}",
                head: "${{ env.BRANCH_NAME }}",
                base: "main",
                body: `## 🤖 Otomatik Issue Düzeltmesi
                
                **Issue:** #${{ github.event.issue.number }} - ${{ github.event.issue.title }}
                
                ### 📊 İşlem Durumu
                - **1. Deneme (Gemini CLI):** ${{ steps.check_attempt1.outputs.success == 'true' && '✅ Başarılı' || '❌ API Overload (503)' }}
                - **2. Deneme (Direct API):** ${{ steps.check_attempt2.outputs.success == 'true' && '✅ Başarılı' || (steps.check_attempt1.outputs.success == 'false' && '❌ API Overload (503)' || '⏭️ Atlandı') }}
                - **3. Fallback:** ${{ steps.manual_fix.outputs.success == 'true' && '✅ Manuel rapor' || '⏭️ Atlandı' }}
                
                ### 🔧 Yapılan Değişiklikler
                Bu PR, issue'yu çözmek için otomatik olarak oluşturulmuştur.
                
                ### ⚠️ 503 Service Unavailable Hatası
                ${{ steps.check_attempt1.outputs.success == 'false' && 'Gemini API geçici olarak aşırı yüklenmiş durumda. Bu normal bir durumdur ve daha sonra tekrar denenebilir.' || 'API başarıyla çalıştı.' }}
                
                ### 🔍 İnceleme
                - [ ] Değişiklikleri kontrol edin
                - [ ] API hata durumunu değerlendirin
                - [ ] Gerekirse manuel düzeltme yapın
                
                ---
                **Branch:** \`${{ env.BRANCH_NAME }}\`  
                **Log:** [Workflow detayları](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                
                Closes #${{ github.event.issue.number }}`
              });
              
              console.log(`✅ Pull Request oluşturuldu: #${pullRequest.number}`);
              console.log(`🔗 PR URL: ${pullRequest.html_url}`);
              
              // PR bilgisini environment'a kaydet
              core.exportVariable('PR_NUMBER', pullRequest.number);
              core.exportVariable('PR_URL', pullRequest.html_url);
              
            } catch (error) {
              console.error('❌ PR oluşturma hatası:', error.message);
              
              // Hata durumunda branch'ı temizle
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${{ env.BRANCH_NAME }}`
                });
                console.log('🧹 Hatalı branch temizlendi');
              } catch (deleteError) {
                console.log('⚠️ Branch temizleme hatası:', deleteError.message);
              }
              
              throw error;
            }
          
      - name: Final Comment on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const success = '${{ steps.final_check.outputs.changes_made }}' === 'true';
            const attempt1 = '${{ steps.check_attempt1.outputs.success }}' === 'true';
            const attempt2 = '${{ steps.check_attempt2.outputs.success }}' === 'true';
            
            let status = '❌ Tüm denemeler başarısız';
            if (attempt1) status = '✅ Gemini CLI ile başarılı';
            else if (attempt2) status = '✅ Direct API ile başarılı';
            else if (success) status = '⚠️ Manuel fallback ile rapor oluşturuldu';
            
            const body = `## ${success ? '✅' : '❌'} İşlem Tamamlandı
            
            ⏰ **Tamamlanma:** ${new Date().toLocaleString('tr-TR')}
            📊 **Sonuç:** ${status}
            
            ### 🔄 Deneme Durumları:
            1. **Gemini CLI:** ${attempt1 ? '✅ Başarılı' : '❌ 503 Service Unavailable'}
            2. **Direct API:** ${attempt2 ? '✅ Başarılı' : (attempt1 ? '⏭️ Atlandı' : '❌ API Overload')}
            3. **Manuel Fallback:** ${success && !attempt1 && !attempt2 ? '✅ Çalıştırıldı' : '⏭️ Gerek kalmadı'}
            
            ### 📋 Sonuç:
            ${success ? `🎉 Pull Request oluşturuldu! PR #${process.env.PR_NUMBER || 'N/A'} - [Görüntüle](${process.env.PR_URL || '#'})` : '😞 Hiçbir değişiklik yapılamadı. Daha sonra tekrar deneyin.'}
            
            ### 💡 503 Hatası Hakkında:
            Bu hata Gemini API'ın geçici olarak aşırı yüklenmiş olması nedeniyle oluşur. 
            Normal bir durumdur ve genellikle 15-30 dakika sonra düzelir.
            
            **Tekrar denemek için:** Issue'yu düzenleyin veya yeni bir yorum ekleyin.
            
            📊 [Detaylı log](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });